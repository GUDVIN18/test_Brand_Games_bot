from aiogram import types, Bot, executor, Dispatcher
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import time
import json
import requests
from bs4 import BeautifulSoup
import re
import logging
from cny_gaspr import cny_run
import asyncio
from pyppeteer import launch
from edit_photo import *
from datetime import datetime

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize FSM storage
memory_storage = MemoryStorage()
current_connection = None 

from dotenv import load_dotenv
import os

load_dotenv()
bot = Bot(os.getenv('TOKEN'))
dp = Dispatcher(bot, storage=memory_storage)

start_time = datetime.now().strftime("%Y-%m-%d %H:%M")




class InputUserData(StatesGroup):
    step_3 = State()
    inline_clothing_step_1 = State()
    inline_shoes_step_2 = State()
    inline_accessories_step_3 = State()
    #–ê–¥–º–∏–Ω–∫–∞
    inline_—Åall_admin_step_4 = State()
    #–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    inline_order_chack_step_5 = State()

        

def category_orders():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ö—É—Ä—Å —é–∞–Ω—è", callback_data="inline_curce"))
    markup.add(types.InlineKeyboardButton("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏", callback_data="inline_photo"))
    markup.add(types.InlineKeyboardButton("–ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞", callback_data="inline_test"))
    markup.add(types.InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å", callback_data="inline_close"))
    return markup


# def parcer_cny_tinkoff():
#     start_time = time.time()
#     url = 'https://www.tinkoff.ru/invest/currencies/CNYRUB/'
#     response = requests.get(url)
#     if response.status_code == 200:
#         html = response.text
#         soup = BeautifulSoup(html, 'html.parser')
#         try:
#             price_cny = soup.find('span', class_="Money-module__money_p_VHJ").text
#             price_cny = re.sub(r'[^\d.,]', '', price_cny)
#             price_cny = round(float(price_cny.replace(',', '.')), 2)
#             price_cny = price_cny + float(0.7)
#         except AttributeError:
#              price_cny = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞!'
#         print('CNY Tinkoff –±–∏—Ä–∂–∞ ', price_cny)
#         end_time = time.time()
#         execution_time = end_time - start_time
#         print(f'–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è : {execution_time} —Å–µ–∫')   
#         return round((price_cny), 2)
    



async def result_cny():
    price_cny = await cny_run()  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ cny_run –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è curce_now
    print(f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: {price_cny}")
    price_cny = round(price_cny, 2)
    return price_cny

    



@dp.message_handler(commands=["start",])
async def start(message: types.Message):
    markupes = category_orders()
    await bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.".format(message.from_user, bot.get_me()),
        parse_mode='html', reply_markup=markupes)
        

@dp.message_handler(commands=["help",])
async def help_command(message: types.Message):
    keyboard_markup = types.InlineKeyboardMarkup()
    support = types.InlineKeyboardButton('–ü–æ–∑–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', callback_data='support')
    back_btn = types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='inline_close_admin_panel')
    keyboard_markup.row(support, back_btn)
    await message.reply(f'ü§î <b>–í–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã?</b> –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ–º–æ–∂–µ—Ç –í–∞–º!\n–ú—ã –Ω–∞ —Å–≤—è–∑–∏ <b>24/7</b>‚ùóÔ∏è', parse_mode='html', reply_markup=keyboard_markup)



@dp.message_handler(commands=["info",])
async def cmd_info(message: types.Message):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é start_time –≤ –æ—Ç–≤–µ—Ç–µ
    await message.answer(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω {start_time}")








@dp.message_handler(lambda message: message.text == "–ù–∞–∑–∞–¥")
async def functions_back_btn(message: types.Message):
    btn = category_orders()
    await bot.send_message(message.chat.id, f"<b>–í–æ–∑–≤—Ä–∞—â–∞—é</b>", parse_mode='html', reply_markup=btn)


@dp.callback_query_handler(lambda c: c.data == 'inline_curce') 
async def handle_chat_message(callback_query: types.CallbackQuery):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='go_back'))
    cny = await result_cny()
    await callback_query.message.edit_text(f'–ö—É—Ä—Å <b>¬•</b> –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: {cny}', parse_mode="html", reply_markup=markup)
    




@dp.callback_query_handler(lambda c: c.data == 'inline_photo') 
async def handle_chat_message(callback_query: types.CallbackQuery):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='go_back'))
    await callback_query.message.edit_text('–û—Ç–ø–∞—Ä–≤—å—Ç–µ <b>–§–æ—Ç–æ</b>:', parse_mode="html", reply_markup=markup)
    print('–ü–æ–ª—É—á–∏–ª —Ñ–æ—Ç–æ')
    await InputUserData.inline_shoes_step_2.set()


@dp.message_handler(content_types=types.ContentType.PHOTO, state=InputUserData.inline_shoes_step_2)
async def handle_photo(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    photo = message.photo[-1]
    
    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    file_id = photo.file_id
    file = await bot.get_file(file_id)
    photo_path = file.file_path
    downloaded_file = await bot.download_file(photo_path)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ
    save_path = f"/var/www/www-root/data/Personal_Folder/tg_bots/test_Brand_Games_bot/photos/{file_id}.jpg"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
    with open(save_path, 'wb') as new_file:
        new_file.write(downloaded_file.read())
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
    url = save_path
    new_photo = edit_photo_func(url)
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='go_back_to_photo'))
    
    await bot.send_photo(message.chat.id, photo=open(new_photo.name, 'rb'), reply_to_message_id=message.message_id, reply_markup=markup)
    print(f"–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {save_path}")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()






from aiogram import types

questions = [
    {
        "question":"–ö–∞–∫–æ–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã –∏–∑—É—á–∞–ª–∏ –Ω–∞ –∫—É—Ä—Å–µ?",
        "options":["Python", "Java", "C++", "Mojo"],
        "correct_answer":"Python"
    },
    {
        "question":"–ö–æ–≥–¥–∞ SpaceX –∑–∞–ø—É—Å—Ç–∏–ªa Starship?",
        "options":["16.02.2024", "15.03.2024", "14.03.2024", "10.03.2024"],
        "correct_answer":"14.03.2024"
    }
]







# –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
class QuizState(StatesGroup):
    QUESTION = State()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û–ø—Ä–æ—Å"
@dp.callback_query_handler(lambda c: c.data == 'inline_test') 
async def start_quiz(callback_query: types.CallbackQuery, state: FSMContext):
    await QuizState.QUESTION.set()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await show_question(callback_query.message, 0)  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
async def show_question(message: types.Message, question_index: int):
    question_data = questions[question_index]
    question_text = question_data["question"]
    options = question_data["options"]

    markup = types.InlineKeyboardMarkup()
    for option in options:
        markup.add(types.InlineKeyboardButton(option, callback_data=f'answer_{option}'))

    await message.edit_text(question_text, reply_markup=markup)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
@dp.callback_query_handler(state=QuizState.QUESTION)
async def handle_answer(callback_query: types.CallbackQuery, state: FSMContext):
    user_answer = callback_query.data.split('_')[-1]  # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_state = await state.get_data()
    question_index = current_state.get("question_index", 0)  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞

    question_data = questions[question_index]
    correct_answer = question_data["correct_answer"]

    if user_answer == correct_answer:
        pass
    else:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        pass

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    next_question_index = question_index + 1
    if next_question_index < len(questions):
        await show_question(callback_query.message, next_question_index)
        await state.update_data(question_index=next_question_index)  # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    else:
        # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await show_result(callback_query.message, state)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
async def show_result(message: types.Message, state: FSMContext):
    # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–æ–≤ –∏ –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    # –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã–≤–µ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    await message.edit_text("–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω. –í–æ—Ç –≤–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç.", reply_markup=None)
    await state.finish()





#–ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–Ω–æ–ø–∫–µ –ù–ê–ó–ê–î
@dp.callback_query_handler(lambda c: c.data == 'inline_close') 
async def handle_chat_message(callback_query: types.CallbackQuery):
    #–°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –º–µ–Ω—é , –í—ã–≤–æ–¥–∏–º –≤–∏–¥–µ–æ –∏ —Ç–µ–∫—Å—Ç –û—Ç–ø–∞—Ä–≤—å—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ ¬•
    await callback_query.message.edit_text('–°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é <b>–∑–∞–∫—Ä—ã—Ç–æ</b>. –í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!', parse_mode='html')
    print('–ó–∞–∫—Ä—ã–ª')



@dp.callback_query_handler(lambda c: c.data == 'inline_close_admin_panel') 
async def handle_chat_message(callback_query: types.CallbackQuery):
    #–°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –º–µ–Ω—é , –í—ã–≤–æ–¥–∏–º –≤–∏–¥–µ–æ –∏ —Ç–µ–∫—Å—Ç –û—Ç–ø–∞—Ä–≤—å—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ ¬•
    await callback_query.message.edit_text('–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å <b>–∑–∞–∫—Ä—ã—Ç–∞</b>', parse_mode='html')
    print('–ó–∞–∫—Ä—ã–ª')

#–ü—Ä–∏ –ø–µ—Ä–µ–¥—É–º—ã–≤–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query_handler(lambda c: c.data == 'go_back', state='*')
async def handle_go_back(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text('<b>–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: </b>', parse_mode='html', reply_markup=category_orders())
    await state.finish()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è

#–ü—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –∫ —Ñ–æ—Ç–æ 
@dp.callback_query_handler(lambda c: c.data == 'go_back_to_photo', state='*')
async def handle_go_back(callback_query: types.CallbackQuery, state: FSMContext):
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä–∞–∑–º–µ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
    current_markup = callback_query.message.reply_markup
    
    # –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–Ω–æ–ø–∫–∏
    if current_markup and current_markup.inline_keyboard:
        # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        current_markup.inline_keyboard.clear()
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Å—Ç–∞–≤–ª—è—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ —Ç–µ–∫—Å—Ç, –Ω–æ —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫–∏
    await bot.edit_message_reply_markup(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, reply_markup=current_markup)

    
    await callback_query.message.answer('<b>–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: </b>', parse_mode='html', reply_markup=category_orders())
    await state.finish()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è








if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)




